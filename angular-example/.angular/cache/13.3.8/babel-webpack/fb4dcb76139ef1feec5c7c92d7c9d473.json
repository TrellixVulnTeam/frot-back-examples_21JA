{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\alanb\\\\IdeaProjects\\\\Aplicacion-Util\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./prueba.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  canActivate(route, state) {\n    if (!this.islogged()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n\n    return true;\n  }\n\n  islogged() {\n    let logged;\n    const obser = this.http.loggedin$.subscribe(value => logged = value);\n    obser.unsubscribe();\n    return logged;\n  }\n\n  session() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let data = yield _this.http.sessionSyn();\n\n      if (data) {\n        _this.http.loginbs();\n\n        let datarol = yield _this.http.isadminSyn();\n\n        if (datarol) {\n          _this.http.admin();\n        }\n      }\n    })();\n  }\n\n  ngOnInit() {\n    this.session();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.PruebaService), i0.ɵɵinject(i2.Router));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/alanb/IdeaProjects/Aplicacion-Util/src/app/auth.guard.ts"],"names":["i0","i1","i2","AuthGuard","constructor","http","router","canActivate","route","state","islogged","navigate","logged","obser","loggedin$","subscribe","value","unsubscribe","session","data","sessionSyn","loginbs","datarol","isadminSyn","admin","ngOnInit","ɵfac","AuthGuard_Factory","t","ɵɵinject","PruebaService","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACtB,QAAI,CAAC,KAAKC,QAAL,EAAL,EAAsB;AAClB,WAAKJ,MAAL,CAAYK,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACA,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AACDD,EAAAA,QAAQ,GAAG;AACP,QAAIE,MAAJ;AACA,UAAMC,KAAK,GAAG,KAAKR,IAAL,CAAUS,SAAV,CAAoBC,SAApB,CAA8BC,KAAK,IAAIJ,MAAM,GAAGI,KAAhD,CAAd;AACAH,IAAAA,KAAK,CAACI,WAAN;AACA,WAAOL,MAAP;AACH;;AACKM,EAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,UAAIC,IAAI,SAAS,KAAI,CAACd,IAAL,CAAUe,UAAV,EAAjB;;AACA,UAAID,IAAJ,EAAU;AACN,QAAA,KAAI,CAACd,IAAL,CAAUgB,OAAV;;AACA,YAAIC,OAAO,SAAS,KAAI,CAACjB,IAAL,CAAUkB,UAAV,EAApB;;AACA,YAAID,OAAJ,EAAa;AACT,UAAA,KAAI,CAACjB,IAAL,CAAUmB,KAAV;AACH;AACJ;AARW;AASf;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKP,OAAL;AACH;;AA9BkB;;AAgCvBf,SAAS,CAACuB,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIzB,SAAV,EAAqBH,EAAE,CAAC6B,QAAH,CAAY5B,EAAE,CAAC6B,aAAf,CAArB,EAAoD9B,EAAE,CAAC6B,QAAH,CAAY3B,EAAE,CAAC6B,MAAf,CAApD,CAAP;AAAqF,CAAtI;;AACA5B,SAAS,CAAC6B,KAAV,GAAkB,aAAchC,EAAE,CAACiC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE/B,SAAT;AAAoBgC,EAAAA,OAAO,EAAEhC,SAAS,CAACuB,IAAvC;AAA6CU,EAAAA,UAAU,EAAE;AAAzD,CAAtB,CAAhC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./prueba.service\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class AuthGuard {\r\n    constructor(http, router) {\r\n        this.http = http;\r\n        this.router = router;\r\n    }\r\n    canActivate(route, state) {\r\n        if (!this.islogged()) {\r\n            this.router.navigate(['login']);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    islogged() {\r\n        let logged;\r\n        const obser = this.http.loggedin$.subscribe(value => logged = value);\r\n        obser.unsubscribe();\r\n        return logged;\r\n    }\r\n    async session() {\r\n        let data = await this.http.sessionSyn();\r\n        if (data) {\r\n            this.http.loginbs();\r\n            let datarol = await this.http.isadminSyn();\r\n            if (datarol) {\r\n                this.http.admin();\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.session();\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.PruebaService), i0.ɵɵinject(i2.Router)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}