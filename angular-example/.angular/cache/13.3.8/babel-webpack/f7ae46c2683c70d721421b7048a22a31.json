{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\alanb\\\\IdeaProjects\\\\Aplicacion-Util\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./prueba.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginGuard {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n\n  canActivate(route, state) {\n    if (this.islogged()) {\n      this.router.navigate(['operador']);\n      return false;\n    }\n\n    return true;\n  } // islogged(){\n  //   let logged;\n  //   const obser=this.http.loggedin$.subscribe(value => logged=value);\n  //   obser.unsubscribe();\n  //   return logged;\n  // }\n\n\n  islogged() {\n    let logged;\n    const obser = this.http.loggedin$.subscribe(value => logged = value);\n    obser.unsubscribe();\n    console.log('can activate login ' + logged);\n    return logged;\n  }\n\n  session() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let data = yield _this.http.sessionSyn();\n\n      if (data) {\n        _this.http.loginbs();\n\n        let datarol = yield _this.http.isadminSyn();\n\n        if (datarol) {\n          _this.http.admin();\n        }\n      }\n    })();\n  }\n\n  ngOnInit() {\n    this.session();\n  }\n\n}\n\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.PruebaService), i0.ɵɵinject(i2.Router));\n};\n\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/alanb/IdeaProjects/Aplicacion-Util/src/app/login.guard.ts"],"names":["i0","i1","i2","LoginGuard","constructor","http","router","canActivate","route","state","islogged","navigate","logged","obser","loggedin$","subscribe","value","unsubscribe","console","log","session","data","sessionSyn","loginbs","datarol","isadminSyn","admin","ngOnInit","ɵfac","LoginGuard_Factory","t","ɵɵinject","PruebaService","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,UAAN,CAAiB;AACpBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACtB,QAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjB,WAAKJ,MAAL,CAAYK,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACA,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GAXmB,CAYpB;AACA;AACA;AACA;AACA;AACA;;;AACAD,EAAAA,QAAQ,GAAG;AACP,QAAIE,MAAJ;AACA,UAAMC,KAAK,GAAG,KAAKR,IAAL,CAAUS,SAAV,CAAoBC,SAApB,CAA8BC,KAAK,IAAIJ,MAAM,GAAGI,KAAhD,CAAd;AACAH,IAAAA,KAAK,CAACI,WAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBP,MAApC;AACA,WAAOA,MAAP;AACH;;AACKQ,EAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,UAAIC,IAAI,SAAS,KAAI,CAAChB,IAAL,CAAUiB,UAAV,EAAjB;;AACA,UAAID,IAAJ,EAAU;AACN,QAAA,KAAI,CAAChB,IAAL,CAAUkB,OAAV;;AACA,YAAIC,OAAO,SAAS,KAAI,CAACnB,IAAL,CAAUoB,UAAV,EAApB;;AACA,YAAID,OAAJ,EAAa;AACT,UAAA,KAAI,CAACnB,IAAL,CAAUqB,KAAV;AACH;AACJ;AARW;AASf;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKP,OAAL;AACH;;AArCmB;;AAuCxBjB,UAAU,CAACyB,IAAX,GAAkB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+B;AAAE,SAAO,KAAKA,CAAC,IAAI3B,UAAV,EAAsBH,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,aAAf,CAAtB,EAAqDhC,EAAE,CAAC+B,QAAH,CAAY7B,EAAE,CAAC+B,MAAf,CAArD,CAAP;AAAsF,CAAzI;;AACA9B,UAAU,CAAC+B,KAAX,GAAmB,aAAclC,EAAE,CAACmC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,UAAT;AAAqBkC,EAAAA,OAAO,EAAElC,UAAU,CAACyB,IAAzC;AAA+CU,EAAAA,UAAU,EAAE;AAA3D,CAAtB,CAAjC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./prueba.service\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class LoginGuard {\r\n    constructor(http, router) {\r\n        this.http = http;\r\n        this.router = router;\r\n    }\r\n    canActivate(route, state) {\r\n        if (this.islogged()) {\r\n            this.router.navigate(['operador']);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    // islogged(){\r\n    //   let logged;\r\n    //   const obser=this.http.loggedin$.subscribe(value => logged=value);\r\n    //   obser.unsubscribe();\r\n    //   return logged;\r\n    // }\r\n    islogged() {\r\n        let logged;\r\n        const obser = this.http.loggedin$.subscribe(value => logged = value);\r\n        obser.unsubscribe();\r\n        console.log('can activate login ' + logged);\r\n        return logged;\r\n    }\r\n    async session() {\r\n        let data = await this.http.sessionSyn();\r\n        if (data) {\r\n            this.http.loginbs();\r\n            let datarol = await this.http.isadminSyn();\r\n            if (datarol) {\r\n                this.http.admin();\r\n            }\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.session();\r\n    }\r\n}\r\nLoginGuard.ɵfac = function LoginGuard_Factory(t) { return new (t || LoginGuard)(i0.ɵɵinject(i1.PruebaService), i0.ɵɵinject(i2.Router)); };\r\nLoginGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LoginGuard, factory: LoginGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}